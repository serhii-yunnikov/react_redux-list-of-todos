{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","actionTodo","action","status","query","startFilter","filterReducer","actionFilter","initialState","todosReducer","playload","rootReducer","combineReducers","currentTodo","filter","todos","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","selectedTodo","modifiedList","completed","selectedList","list","title","toUpperCase","includes","className","map","id","classNames","onClick","onButtonClick","TodoFilter","value","onChange","event","target","filterActions","placeholder","length","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","currentUser","setCurrentUser","useEffect","userId","user","href","email","name","App","api","setTodos","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5f278ee5.chunk.js","sourcesContent":["import { Action } from 'redux';\nimport { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype ActionsTodo = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  actionTodo: Action,\n): State => {\n  const action = actionTodo as ActionsTodo;\n\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetFilter = { type: 'setFilter'; payload: Status; };\ntype SetQuerry = { type: 'setQuery'; payload: string; };\n\nexport type StateFilter = { query: string; status: Status };\ntype Action = SetFilter | SetQuerry;\n\nconst setFilter = (status: Status) => ({ type: 'setFilter', payload: status });\nconst setQuery = (query: string) => ({ type: 'setQuery', payload: query });\n\nexport const actions = { setFilter, setQuery };\n\nconst startFilter: StateFilter = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (\n  state: StateFilter = startFilter,\n  actionFilter: Action,\n): StateFilter => {\n  const action: SetFilter | SetQuerry = actionFilter;\n\n  switch (action.type) {\n    case 'setQuery':\n      return {\n        ...state,\n        query: action.payload,\n      };\n    case 'setFilter':\n      return {\n        ...state,\n        status: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodos = { type: 'setTodos'; playload: Todo[]; };\n\nexport const setTodos\n= (todos: Todo[]) => ({ type: 'setTodos', playload: todos });\n\nexport type StateTodos = Todo [];\n\ntype State = Todo[];\nconst initialState: State = [];\n\nconst todosReducer = (\n  state: State = initialState,\n  action: SetTodos,\n): Todo[] => {\n  switch (action.type) {\n    case 'setTodos':\n      return action.playload;\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { actions } from '../../features/currentTodo';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos as Todo[]);\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const onButtonClick = (todo: Todo) => {\n    dispatch(actions.setTodo(todo));\n  };\n\n  const { query, status } = useAppSelector(state => state.filter);\n\n  const selectedList = () => {\n    switch (status) {\n      case 'active':\n        return todos.filter(todo => todo.completed === false);\n      case 'completed':\n        return todos.filter(todo => todo.completed === true);\n      default:\n        return todos;\n    }\n  };\n\n  const modifiedList = selectedList().filter(list => {\n    return list.title.toUpperCase().includes(query.toUpperCase());\n  });\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {modifiedList.map(todo => (\n          <tr\n            data-cy=\"todo\"\n            className=\"\"\n            key={todo.id}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p className={classNames({\n                'has-text-danger': !todo.completed,\n              },\n              {\n                'has-text-success': todo.completed,\n              })}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => onButtonClick(todo)}\n              >\n                <span className=\"icon\">\n                  <i\n                    className={classNames(\n                      'far',\n                      { 'fa-eye': todo.id !== selectedTodo?.id },\n                      { 'fa-eye-slash': todo.id === selectedTodo?.id },\n                    )}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { Status } from '../../types/Status';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\n\nexport const TodoFilter: React.FC = () => {\n  const { query, status } = useAppSelector(state => state.filter);\n\n  const dispatch = useAppDispatch();\n\n  const handleSelect: React.ChangeEventHandler<HTMLSelectElement>\n  = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    dispatch(filterActions.setFilter(value as Status));\n  };\n\n  const eraseInput = () => {\n    dispatch(filterActions.setQuery(''));\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    dispatch(filterActions.setQuery(value));\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleSelect}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleInputChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query.length && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={eraseInput}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useState, useEffect } from 'react';\nimport { Loader } from '../Loader';\n\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\nimport { useAppDispatch } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\n\ntype Props = {\n  todo?: Todo;\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo }) => {\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    if (todo) {\n      getUser(todo?.userId)\n        .then(user => setCurrentUser(user));\n    }\n  }, [todo]);\n\n  const onButtonCross = () => {\n    dispatch(actions.removeTodo());\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!currentUser ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {todo?.id}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onButtonCross}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo?.completed\n                ? (\n                  <strong className=\"has-text-success\">Done</strong>\n                )\n                : (\n                  <strong className=\"has-text-danger\">Planned</strong>)}\n\n              {' by '}\n\n              <a href={currentUser.email}>\n                {currentUser.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from './app/hooks';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nimport { getTodos } from './api';\nimport { setTodos } from './features/todos';\nimport { Todo } from './types/Todo';\n\nexport const App: React.FC = () => {\n  const dispatch = useDispatch();\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const todos = useAppSelector(state => state.todos as Todo[]);\n\n  useEffect(() => {\n    getTodos()\n      .then(api => {\n        dispatch(setTodos(api));\n      });\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {todos.length > 0\n                ? (\n                  <TodoList />\n                )\n                : <Loader />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal todo={selectedTodo} />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}